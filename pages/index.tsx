import BaseLayout from "@/components/BaseLayout/BaseLayout";
import { MenuIcon } from "@/components/Icons/MenuIcons";
import DeallSelect from "@/components/Select/Select";
import Table from "@/components/Table/Table";
import Toolbar from "@/components/Toolbar/Toolbar";
import { columns } from "@/constant/productColumn";
import { useInputChange } from "@/hooks/useInputChange";
import { useMap } from "@/hooks/useMap";
import { useSelect } from "@/hooks/useSelect";
import { ProductService } from "@/Services/ProductService";
import { TextField } from "@mui/material";
import Head from "next/head";
import Image from "next/image";
import { useEffect, useMemo, useState } from "react";

export const Menu = [
  {
    id: "product",
    icon: MenuIcon.home,
    name: "Products",
    path: "/",
  },
  {
    id: "cart",
    icon: MenuIcon.portfolio,
    name: "Cart",
    path: "/cart",
  },
];

const userData = {
  portfolio: "130.431.449",
  buyingPwr: 13431449,
  image: <img src="/Image/user.png" alt="user" />,
};

export default function Home() {
  const [allProduct, setAllProduct] = useState<any>([]);
  const [search, setSearch] = useState("");
  const [categories, setCategories] = useState([]);
  const [selectedCateg, setSelectedCateg] = useState("");
  const [selectedBrand, setSelectedBrand] = useState("");
  const [brands, setBrands] = useState<any>([]);
  const [brandsCount, setBrandsCount] = useState<any>({});
  const [maxPrice, setMaxPrice] = useState("");
  const [minPrice, setMinPrice] = useState("");

  const searchBox = useInputChange();
  const minPriceInput = useInputChange();
  const maxPriceInput = useInputChange();

  const brandSelect = useSelect();
  const categorySelect = useSelect();

  const brand = useMap();

  const product: any[] = useMemo(
    () =>
      allProduct
        .filter(
          selectedCateg
            ? (data: any) => data.category === selectedCateg
            : (data: any) => data
        )
        .filter(
          selectedBrand
            ? (data: any) => data.brand === selectedBrand
            : (data: any) => data
        )
        .filter(
          maxPrice ? (data: any) => data.price <= maxPrice : (data: any) => data
        )
        .filter(
          minPrice ? (data: any) => data.price >= minPrice : (data: any) => data
        )
        .filter(
          search
            ? (data: any) => data.title.includes(search)
            : (data: any) => data
        ),
    [allProduct, selectedCateg, selectedBrand, search, maxPrice, minPrice]
  );

  const productService = new ProductService();

  useEffect(() => {
    async function getProduct() {
      const data = (await productService.getProduct()).data;
      setAllProduct(data.products);
      brand.mapBrand(data.products, setBrandsCount, setBrands);
    }

    async function getCategories() {
      const data = (await productService.getCategories()).data;
      setCategories(data);
    }

    const lastSelectedCateg = JSON.parse(
      localStorage.getItem("selectedCateg")!
    );
    if (lastSelectedCateg) {
      setSelectedCateg(lastSelectedCateg);
    }
    const lastSelectedBrand = JSON.parse(
      localStorage.getItem("selectedBrand")!
    );
    if (lastSelectedBrand) {
      setSelectedBrand(lastSelectedBrand);
    }

    const lastSearch = JSON.parse(localStorage.getItem("lastSearch")!);
    if (lastSearch) {
      setSearch(lastSearch);
    }

    const lastInputMinPrice = JSON.parse(
      localStorage.getItem("lastInputMinPrice")!
    );
    if (lastInputMinPrice) {
      console.log(lastInputMinPrice);
      setMinPrice(lastInputMinPrice);
    }
    const lastInputMaxPrice = JSON.parse(
      localStorage.getItem("lastInputMaxPrice")!
    );
    if (lastInputMaxPrice) {
      setMaxPrice(lastInputMaxPrice);
    }

    getProduct();
    getCategories();
  }, [minPrice, maxPrice, search, selectedBrand, selectedCateg]);

  useEffect(() => {}, []);

  const productRows = product.map((p: any, key: any) => {
    return {
      id: key,
      productName: p.title,
      brand: p.brand,
      price: p.price,
      stock: p.stock,
      category: p.category,
    };
  });

  return (
    <>
      <Head>
        <title>Admin</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main>
        <BaseLayout
          menu={Menu}
          sidebarLogo={<>Toko Online</>}
          headerData={userData}
        >
          <Toolbar
            onChange={(e) => searchBox.handleChange(e, setSearch, "lastSearch")}
            initialValue={search}
          >
            <>
              <DeallSelect
                label="Categories"
                options={categories}
                value={selectedCateg}
                handleChange={(e: any) =>
                  categorySelect.handleSelect("Categories", e, setSelectedCateg)
                }
              />
              <DeallSelect
                label="Brands"
                options={brands}
                value={selectedBrand}
                handleChange={(e: any) =>
                  brandSelect.handleSelect("Brands", e, setSelectedBrand)
                }
              />
              <TextField
                className="w-full"
                id="minPrice"
                label="Min Price"
                defaultValue={0}
                value={minPrice}
                variant="standard"
                onChange={(e) =>
                  minPriceInput.handleChange(
                    e,
                    setMinPrice,
                    "lastInputMinPrice"
                  )
                }
              />

              <TextField
                className="w-full"
                id="maxPrice"
                label="Max Price"
                variant="standard"
                defaultValue={100000}
                value={maxPrice}
                onChange={(e) =>
                  maxPriceInput.handleChange(
                    e,
                    setMaxPrice,
                    "lastInputMaxPrice"
                  )
                }
              />
            </>
          </Toolbar>

          <Table rows={productRows} columns={columns} />
        </BaseLayout>
      </main>
    </>
  );
}
