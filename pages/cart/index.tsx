import BaseLayout from "@/components/BaseLayout/BaseLayout";
import { MenuIcon } from "@/components/Icons/MenuIcons";
import Table from "@/components/Table/Table";
import { CartService } from "@/Services/CartService";
import { UserService } from "@/Services/UserService";
import { GridColDef, GridRowParams } from "@mui/x-data-grid";
import Head from "next/head";
import Image from "next/image";
import { useEffect, useMemo, useState } from "react";
import { useRouter } from "next/router";
import { useMap } from "@/hooks/useMap";
import { Menu } from "@/constant/menu";


const userData = {
  portfolio: "130.431.449",
  buyingPwr: 13431449,
  image: <img src="/Image/user.png" alt="user" />,
};

export default function Cart() {
  const [cart, setCart] = useState<any>([]);
  const router = useRouter();
  const [allUser, setAllUser] = useState<any>([]);
  const [column, setColumn] = useState<GridColDef[]>([]);
  const [row, setRow] = useState();

  const cartService = new CartService();
  const userService = new UserService();

  const user = useMap();

  useEffect(() => {
    async function getCartList() {
      const data = (await cartService.getCartList()).data;
      setCart(data.carts);
    }

    async function getUsers() {
      let data = (await userService.getAllUsers()).data;
      let res: any = [{}];
      if (data) {
        data.users.map((d: any) => {
          res.push({ id: d.id, name: d.firstName + " " + d.lastName });
        });
        setAllUser(res);
      }
    }

    getCartList();
    getUsers();
  }, []);

  useEffect(() => {

    

    const columns: GridColDef[] = [
      { field: "id", headerName: "ID", hide: true },
      { field: "user", headerName: "User ID", flex: 1, minWidth: 100 },
      { field: "totalProduct", headerName: "Total Product", flex: 1, minWidth: 100 },
      { field: "totalQuantity", headerName: "Total Quantity", flex: 1 , minWidth: 100},
      {
        field: "total",
        headerName: "Total",
        type: "number",
        flex: 1,
        minWidth: 100
      },
      {
        field: "action",
        headerName: "Action",
        flex: 1,
        minWidth: 100,
        sortable: false,
        renderCell: ({ row }: Partial<GridRowParams>) => (
          <button onClick={() => viewDetails(row)}>View</button>
        ),
      },
    ];

    const cartRows = allUser && cart.map((c: any) => {
      return {
        id: c.id,
        user: user.mapUser(allUser,c.userId),
        totalProduct: c.totalProducts,
        totalQuantity: c.totalQuantity,
        total: c.total,
      };
    });

    setColumn(columns);
    setRow(cartRows);
  },[allUser, cart]);

  function viewDetails(row: GridRowParams): void {
    router.push({
      pathname: "/cart/[id]",
      query: { id: row.id },
    });
  }

  return (
    <>
      <Head>
        <title>Admin</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main>
        <BaseLayout
          menu={Menu}
          sidebarLogo={MenuIcon.logo}
          headerData={userData}
        >
          <div className="mb-4 w-full">
            <div className="bg-basic-12 w-full rounded-2xl p-6">
              <p className="flex text-xxs text-brand-text-grey items-center">
                Cart
              </p>
              <p className="flex text-base items-center font-extrabold">Cart</p>
            </div>
          </div>
          {column && row ? (<Table rows={row} columns={column} pageSize={10} /> ) : (<></>)}
          
        </BaseLayout>
      </main>
    </>
  );
}
